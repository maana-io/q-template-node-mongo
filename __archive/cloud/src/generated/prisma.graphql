# source: https://us1.prisma.sh/roie-schwaber-cohen-c0f7d8/procurement/dev
# timestamp: Fri Aug 03 2018 10:41:31 GMT-0700 (PDT)

type AggregateCost {
  count: Int!
}

type AggregateGeoCoordinate {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateManufacturer {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregatePart {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Cost {
  currency: String
  value: Float
}

"""A connection to a list of items."""
type CostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CostEdge]!
  aggregate: AggregateCost!
}

input CostCreateInput {
  currency: String
  value: Float
}

input CostCreateOneInput {
  create: CostCreateInput
}

"""An edge in a connection."""
type CostEdge {
  """The item at the end of the edge."""
  node: Cost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CostOrderByInput {
  currency_ASC
  currency_DESC
  value_ASC
  value_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CostPreviousValues {
  currency: String
  value: Float
}

type CostSubscriptionPayload {
  mutation: MutationType!
  node: Cost
  updatedFields: [String!]
  previousValues: CostPreviousValues
}

input CostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CostWhereInput
}

input CostUpdateDataInput {
  currency: String
  value: Float
}

input CostUpdateInput {
  currency: String
  value: Float
}

input CostUpdateOneInput {
  create: CostCreateInput
  disconnect: Boolean
  delete: Boolean
  update: CostUpdateDataInput
  upsert: CostUpsertNestedInput
}

input CostUpsertNestedInput {
  update: CostUpdateDataInput!
  create: CostCreateInput!
}

input CostWhereInput {
  """Logical AND on all given filters."""
  AND: [CostWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostWhereInput!]
  currency: String

  """All values that are not equal to given value."""
  currency_not: String

  """All values that are contained in given list."""
  currency_in: [String!]

  """All values that are not contained in given list."""
  currency_not_in: [String!]

  """All values less than the given value."""
  currency_lt: String

  """All values less than or equal the given value."""
  currency_lte: String

  """All values greater than the given value."""
  currency_gt: String

  """All values greater than or equal the given value."""
  currency_gte: String

  """All values containing the given string."""
  currency_contains: String

  """All values not containing the given string."""
  currency_not_contains: String

  """All values starting with the given string."""
  currency_starts_with: String

  """All values not starting with the given string."""
  currency_not_starts_with: String

  """All values ending with the given string."""
  currency_ends_with: String

  """All values not ending with the given string."""
  currency_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

scalar DateTime

type GeoCoordinate {
  lat: Float
  long: Float
}

"""A connection to a list of items."""
type GeoCoordinateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeoCoordinateEdge]!
  aggregate: AggregateGeoCoordinate!
}

input GeoCoordinateCreateInput {
  lat: Float
  long: Float
}

input GeoCoordinateCreateOneInput {
  create: GeoCoordinateCreateInput
}

"""An edge in a connection."""
type GeoCoordinateEdge {
  """The item at the end of the edge."""
  node: GeoCoordinate!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GeoCoordinateOrderByInput {
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GeoCoordinatePreviousValues {
  lat: Float
  long: Float
}

type GeoCoordinateSubscriptionPayload {
  mutation: MutationType!
  node: GeoCoordinate
  updatedFields: [String!]
  previousValues: GeoCoordinatePreviousValues
}

input GeoCoordinateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoCoordinateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoCoordinateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoCoordinateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GeoCoordinateWhereInput
}

input GeoCoordinateUpdateDataInput {
  lat: Float
  long: Float
}

input GeoCoordinateUpdateInput {
  lat: Float
  long: Float
}

input GeoCoordinateUpdateOneInput {
  create: GeoCoordinateCreateInput
  disconnect: Boolean
  delete: Boolean
  update: GeoCoordinateUpdateDataInput
  upsert: GeoCoordinateUpsertNestedInput
}

input GeoCoordinateUpsertNestedInput {
  update: GeoCoordinateUpdateDataInput!
  create: GeoCoordinateCreateInput!
}

input GeoCoordinateWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoCoordinateWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoCoordinateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoCoordinateWhereInput!]
  lat: Float

  """All values that are not equal to given value."""
  lat_not: Float

  """All values that are contained in given list."""
  lat_in: [Float!]

  """All values that are not contained in given list."""
  lat_not_in: [Float!]

  """All values less than the given value."""
  lat_lt: Float

  """All values less than or equal the given value."""
  lat_lte: Float

  """All values greater than the given value."""
  lat_gt: Float

  """All values greater than or equal the given value."""
  lat_gte: Float
  long: Float

  """All values that are not equal to given value."""
  long_not: Float

  """All values that are contained in given list."""
  long_in: [Float!]

  """All values that are not contained in given list."""
  long_not_in: [Float!]

  """All values less than the given value."""
  long_lt: Float

  """All values less than or equal the given value."""
  long_lte: Float

  """All values greater than the given value."""
  long_gt: Float

  """All values greater than or equal the given value."""
  long_gte: Float
}

type Location implements Node {
  id: ID!
  name: String
  coordinates(where: GeoCoordinateWhereInput): GeoCoordinate
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  name: String
  coordinates: GeoCoordinateCreateOneInput
}

input LocationCreateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  name: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  name: String
  coordinates: GeoCoordinateUpdateOneInput
}

input LocationUpdateInput {
  name: String
  coordinates: GeoCoordinateUpdateOneInput
}

input LocationUpdateOneInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LocationUpdateDataInput
  upsert: LocationUpsertNestedInput
}

input LocationUpsertNestedInput {
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  coordinates: GeoCoordinateWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Manufacturer implements Node {
  id: ID!
  name: String
  parts(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Part!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  location(where: LocationWhereInput): Location
}

"""A connection to a list of items."""
type ManufacturerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ManufacturerEdge]!
  aggregate: AggregateManufacturer!
}

input ManufacturerCreateInput {
  name: String
  parts: PartCreateManyWithoutManufacturerInput
  orders: OrderCreateManyWithoutSupplierInput
  location: LocationCreateOneInput
}

input ManufacturerCreateOneWithoutOrdersInput {
  create: ManufacturerCreateWithoutOrdersInput
  connect: ManufacturerWhereUniqueInput
}

input ManufacturerCreateOneWithoutPartsInput {
  create: ManufacturerCreateWithoutPartsInput
  connect: ManufacturerWhereUniqueInput
}

input ManufacturerCreateWithoutOrdersInput {
  name: String
  parts: PartCreateManyWithoutManufacturerInput
  location: LocationCreateOneInput
}

input ManufacturerCreateWithoutPartsInput {
  name: String
  orders: OrderCreateManyWithoutSupplierInput
  location: LocationCreateOneInput
}

"""An edge in a connection."""
type ManufacturerEdge {
  """The item at the end of the edge."""
  node: Manufacturer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ManufacturerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ManufacturerPreviousValues {
  id: ID!
  name: String
}

type ManufacturerSubscriptionPayload {
  mutation: MutationType!
  node: Manufacturer
  updatedFields: [String!]
  previousValues: ManufacturerPreviousValues
}

input ManufacturerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ManufacturerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ManufacturerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ManufacturerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ManufacturerWhereInput
}

input ManufacturerUpdateInput {
  name: String
  parts: PartUpdateManyWithoutManufacturerInput
  orders: OrderUpdateManyWithoutSupplierInput
  location: LocationUpdateOneInput
}

input ManufacturerUpdateOneWithoutOrdersInput {
  create: ManufacturerCreateWithoutOrdersInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ManufacturerUpdateWithoutOrdersDataInput
  upsert: ManufacturerUpsertWithoutOrdersInput
}

input ManufacturerUpdateOneWithoutPartsInput {
  create: ManufacturerCreateWithoutPartsInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ManufacturerUpdateWithoutPartsDataInput
  upsert: ManufacturerUpsertWithoutPartsInput
}

input ManufacturerUpdateWithoutOrdersDataInput {
  name: String
  parts: PartUpdateManyWithoutManufacturerInput
  location: LocationUpdateOneInput
}

input ManufacturerUpdateWithoutPartsDataInput {
  name: String
  orders: OrderUpdateManyWithoutSupplierInput
  location: LocationUpdateOneInput
}

input ManufacturerUpsertWithoutOrdersInput {
  update: ManufacturerUpdateWithoutOrdersDataInput!
  create: ManufacturerCreateWithoutOrdersInput!
}

input ManufacturerUpsertWithoutPartsInput {
  update: ManufacturerUpdateWithoutPartsDataInput!
  create: ManufacturerCreateWithoutPartsInput!
}

input ManufacturerWhereInput {
  """Logical AND on all given filters."""
  AND: [ManufacturerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ManufacturerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ManufacturerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  parts_every: PartWhereInput
  parts_some: PartWhereInput
  parts_none: PartWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  location: LocationWhereInput
}

input ManufacturerWhereUniqueInput {
  id: ID
}

type Mutation {
  createPart(data: PartCreateInput!): Part!
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer!
  createOrder(data: OrderCreateInput!): Order!
  createGeoCoordinate(data: GeoCoordinateCreateInput!): GeoCoordinate!
  createCost(data: CostCreateInput!): Cost!
  createLocation(data: LocationCreateInput!): Location!
  updatePart(data: PartUpdateInput!, where: PartWhereUniqueInput!): Part
  updateManufacturer(data: ManufacturerUpdateInput!, where: ManufacturerWhereUniqueInput!): Manufacturer
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  deletePart(where: PartWhereUniqueInput!): Part
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteLocation(where: LocationWhereUniqueInput!): Location
  upsertPart(where: PartWhereUniqueInput!, create: PartCreateInput!, update: PartUpdateInput!): Part!
  upsertManufacturer(where: ManufacturerWhereUniqueInput!, create: ManufacturerCreateInput!, update: ManufacturerUpdateInput!): Manufacturer!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  updateManyParts(data: PartUpdateInput!, where: PartWhereInput): BatchPayload!
  updateManyManufacturers(data: ManufacturerUpdateInput!, where: ManufacturerWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateInput!, where: OrderWhereInput): BatchPayload!
  updateManyGeoCoordinates(data: GeoCoordinateUpdateInput!, where: GeoCoordinateWhereInput): BatchPayload!
  updateManyCosts(data: CostUpdateInput!, where: CostWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput): BatchPayload!
  deleteManyParts(where: PartWhereInput): BatchPayload!
  deleteManyManufacturers(where: ManufacturerWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyGeoCoordinates(where: GeoCoordinateWhereInput): BatchPayload!
  deleteManyCosts(where: CostWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Order implements Node {
  id: ID!
  part(where: PartWhereInput): Part!
  supplier(where: ManufacturerWhereInput): Manufacturer
  deliveryDate: DateTime
  cost(where: CostWhereInput): Cost
  status: Status
}

"""A connection to a list of items."""
type OrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  deliveryDate: DateTime
  status: Status
  part: PartCreateOneWithoutOrderInput!
  supplier: ManufacturerCreateOneWithoutOrdersInput
  cost: CostCreateOneInput
}

input OrderCreateManyWithoutSupplierInput {
  create: [OrderCreateWithoutSupplierInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutPartInput {
  create: OrderCreateWithoutPartInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutPartInput {
  deliveryDate: DateTime
  status: Status
  supplier: ManufacturerCreateOneWithoutOrdersInput
  cost: CostCreateOneInput
}

input OrderCreateWithoutSupplierInput {
  deliveryDate: DateTime
  status: Status
  part: PartCreateOneWithoutOrderInput!
  cost: CostCreateOneInput
}

"""An edge in a connection."""
type OrderEdge {
  """The item at the end of the edge."""
  node: Order!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  deliveryDate_ASC
  deliveryDate_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrderPreviousValues {
  id: ID!
  deliveryDate: DateTime
  status: Status
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
}

input OrderUpdateInput {
  deliveryDate: DateTime
  status: Status
  part: PartUpdateOneWithoutOrderInput
  supplier: ManufacturerUpdateOneWithoutOrdersInput
  cost: CostUpdateOneInput
}

input OrderUpdateManyWithoutSupplierInput {
  create: [OrderCreateWithoutSupplierInput!]
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutSupplierInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutSupplierInput!]
}

input OrderUpdateOneWithoutPartInput {
  create: OrderCreateWithoutPartInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrderUpdateWithoutPartDataInput
  upsert: OrderUpsertWithoutPartInput
}

input OrderUpdateWithoutPartDataInput {
  deliveryDate: DateTime
  status: Status
  supplier: ManufacturerUpdateOneWithoutOrdersInput
  cost: CostUpdateOneInput
}

input OrderUpdateWithoutSupplierDataInput {
  deliveryDate: DateTime
  status: Status
  part: PartUpdateOneWithoutOrderInput
  cost: CostUpdateOneInput
}

input OrderUpdateWithWhereUniqueWithoutSupplierInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutSupplierDataInput!
}

input OrderUpsertWithoutPartInput {
  update: OrderUpdateWithoutPartDataInput!
  create: OrderCreateWithoutPartInput!
}

input OrderUpsertWithWhereUniqueWithoutSupplierInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutSupplierDataInput!
  create: OrderCreateWithoutSupplierInput!
}

input OrderWhereInput {
  """Logical AND on all given filters."""
  AND: [OrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  deliveryDate: DateTime

  """All values that are not equal to given value."""
  deliveryDate_not: DateTime

  """All values that are contained in given list."""
  deliveryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  deliveryDate_not_in: [DateTime!]

  """All values less than the given value."""
  deliveryDate_lt: DateTime

  """All values less than or equal the given value."""
  deliveryDate_lte: DateTime

  """All values greater than the given value."""
  deliveryDate_gt: DateTime

  """All values greater than or equal the given value."""
  deliveryDate_gte: DateTime
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  part: PartWhereInput
  supplier: ManufacturerWhereInput
  cost: CostWhereInput
}

input OrderWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Part implements Node {
  id: ID!
  name: String!
  manufacturer(where: ManufacturerWhereInput): Manufacturer
  descriptor: String!
  order(where: OrderWhereInput): Order
}

"""A connection to a list of items."""
type PartConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PartEdge]!
  aggregate: AggregatePart!
}

input PartCreateInput {
  name: String!
  descriptor: String!
  manufacturer: ManufacturerCreateOneWithoutPartsInput
  order: OrderCreateOneWithoutPartInput
}

input PartCreateManyWithoutManufacturerInput {
  create: [PartCreateWithoutManufacturerInput!]
  connect: [PartWhereUniqueInput!]
}

input PartCreateOneWithoutOrderInput {
  create: PartCreateWithoutOrderInput
  connect: PartWhereUniqueInput
}

input PartCreateWithoutManufacturerInput {
  name: String!
  descriptor: String!
  order: OrderCreateOneWithoutPartInput
}

input PartCreateWithoutOrderInput {
  name: String!
  descriptor: String!
  manufacturer: ManufacturerCreateOneWithoutPartsInput
}

"""An edge in a connection."""
type PartEdge {
  """The item at the end of the edge."""
  node: Part!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PartOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  descriptor_ASC
  descriptor_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PartPreviousValues {
  id: ID!
  name: String!
  descriptor: String!
}

type PartSubscriptionPayload {
  mutation: MutationType!
  node: Part
  updatedFields: [String!]
  previousValues: PartPreviousValues
}

input PartSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PartSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PartSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PartSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PartWhereInput
}

input PartUpdateInput {
  name: String
  descriptor: String
  manufacturer: ManufacturerUpdateOneWithoutPartsInput
  order: OrderUpdateOneWithoutPartInput
}

input PartUpdateManyWithoutManufacturerInput {
  create: [PartCreateWithoutManufacturerInput!]
  connect: [PartWhereUniqueInput!]
  disconnect: [PartWhereUniqueInput!]
  delete: [PartWhereUniqueInput!]
  update: [PartUpdateWithWhereUniqueWithoutManufacturerInput!]
  upsert: [PartUpsertWithWhereUniqueWithoutManufacturerInput!]
}

input PartUpdateOneWithoutOrderInput {
  create: PartCreateWithoutOrderInput
  connect: PartWhereUniqueInput
  delete: Boolean
  update: PartUpdateWithoutOrderDataInput
  upsert: PartUpsertWithoutOrderInput
}

input PartUpdateWithoutManufacturerDataInput {
  name: String
  descriptor: String
  order: OrderUpdateOneWithoutPartInput
}

input PartUpdateWithoutOrderDataInput {
  name: String
  descriptor: String
  manufacturer: ManufacturerUpdateOneWithoutPartsInput
}

input PartUpdateWithWhereUniqueWithoutManufacturerInput {
  where: PartWhereUniqueInput!
  data: PartUpdateWithoutManufacturerDataInput!
}

input PartUpsertWithoutOrderInput {
  update: PartUpdateWithoutOrderDataInput!
  create: PartCreateWithoutOrderInput!
}

input PartUpsertWithWhereUniqueWithoutManufacturerInput {
  where: PartWhereUniqueInput!
  update: PartUpdateWithoutManufacturerDataInput!
  create: PartCreateWithoutManufacturerInput!
}

input PartWhereInput {
  """Logical AND on all given filters."""
  AND: [PartWhereInput!]

  """Logical OR on all given filters."""
  OR: [PartWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PartWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  descriptor: String

  """All values that are not equal to given value."""
  descriptor_not: String

  """All values that are contained in given list."""
  descriptor_in: [String!]

  """All values that are not contained in given list."""
  descriptor_not_in: [String!]

  """All values less than the given value."""
  descriptor_lt: String

  """All values less than or equal the given value."""
  descriptor_lte: String

  """All values greater than the given value."""
  descriptor_gt: String

  """All values greater than or equal the given value."""
  descriptor_gte: String

  """All values containing the given string."""
  descriptor_contains: String

  """All values not containing the given string."""
  descriptor_not_contains: String

  """All values starting with the given string."""
  descriptor_starts_with: String

  """All values not starting with the given string."""
  descriptor_not_starts_with: String

  """All values ending with the given string."""
  descriptor_ends_with: String

  """All values not ending with the given string."""
  descriptor_not_ends_with: String
  manufacturer: ManufacturerWhereInput
  order: OrderWhereInput
}

input PartWhereUniqueInput {
  id: ID
}

type Query {
  parts(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Part]!
  manufacturers(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Manufacturer]!
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  geoCoordinates(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoCoordinate]!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  part(where: PartWhereUniqueInput!): Part
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  order(where: OrderWhereUniqueInput!): Order
  location(where: LocationWhereUniqueInput!): Location
  partsConnection(where: PartWhereInput, orderBy: PartOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PartConnection!
  manufacturersConnection(where: ManufacturerWhereInput, orderBy: ManufacturerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManufacturerConnection!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  geoCoordinatesConnection(where: GeoCoordinateWhereInput, orderBy: GeoCoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoCoordinateConnection!
  costsConnection(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Status {
  OPEN
  PURCHASED
  ON_ROUTE
  CLOSE
}

type Subscription {
  part(where: PartSubscriptionWhereInput): PartSubscriptionPayload
  manufacturer(where: ManufacturerSubscriptionWhereInput): ManufacturerSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  geoCoordinate(where: GeoCoordinateSubscriptionWhereInput): GeoCoordinateSubscriptionPayload
  cost(where: CostSubscriptionWhereInput): CostSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
}
